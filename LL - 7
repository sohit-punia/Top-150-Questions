Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.

    ListNode* reverseKGroup(ListNode* head, int k) {
       if(head == NULL) return NULL;
       ListNode* next = NULL;
       ListNode* curr = head;
       ListNode* prev = NULL;
       int cnt = 0;
    ListNode* check = head;
       for (int i = 0; i < k; ++i) {
            if (!check) 
               return head;    // fewer than k nodes â†’ bail out, leave the tail as-is
            check = check->next;
        }   
       
       while(curr != NULL && cnt <k){
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr= next;
        cnt++;
       } 
       if(next != NULL){
        head ->next = reverseKGroup(next , k);
       }
       return prev;
    }
