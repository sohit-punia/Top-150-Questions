You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.

Evaluate the expression. Return an integer that represents the value of the expression.

Note that:
The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer.



    int evalRPN(vector<string>& tokens) {
        stack <int> s;
        for(string x : tokens){
            if(x == "+"){
                int a = s.top();
                s.pop();
                int b = s.top();
                s.pop();
                s.push(a + b);
            }
            else if(x == "*"){
                int a = s.top();
                s.pop();
                int b = s.top();
                s.pop();
                s.push(a * b);
            }
            else if(x =="-"){
                int a = s.top();
                s.pop();
                int b = s.top();
                s.pop();
                s.push( b - a);
            }
            else if(x == "/"){
                int a = s.top();
                s.pop();
                int b = s.top();
                s.pop();
                s.push(b / a);
            }
            else{
                s.push(stoi(x));
            }
        }
        return s.top();
    }
