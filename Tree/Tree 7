Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.


class Solution {
    map<int , int> inMap;
    TreeNode* Tree(vector<int>& inorder , int inStart , int inEnd ,vector<int>& postorder, int postStart , int postEnd ,const map<int , int> &inMap){
        if(inStart > inEnd || postStart > postEnd) return NULL;

        TreeNode* root = new TreeNode(postorder[postEnd]);
        int inroot = inMap.at(root->val);
        int numLeft = inroot - inStart;
        root->left = Tree(inorder , inStart , inroot -1 , postorder , postStart , postStart + numLeft - 1 , inMap);

        root->right = Tree(inorder , inroot + 1 ,inEnd , postorder , postStart + numLeft  ,postEnd -1 , inMap );
        return root;
    }
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        inMap.clear();
        for(int i = 0; i<inorder.size(); i++){
            inMap[inorder[i]] = i;
        }

        return Tree(inorder , 0 , inorder.size() -1 , postorder , 0 , postorder.size() -1 , inMap);
        

    }
};
