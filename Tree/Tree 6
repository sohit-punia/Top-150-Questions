Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.

 */
class Solution {
  map<int , int > inMap;
    TreeNode* buildTree(const vector<int>& preorder , int prestart , int preend ,const vector<int>& inorder , int instart , int inend , const map<int , int >&inMap ){
        if(prestart > preend || instart > inend) return NULL;
        TreeNode* root = new TreeNode(preorder[prestart]);
        int inroot  = inMap.at(root->val);
        int numLeft = inroot - instart;
        root -> left = buildTree(preorder , prestart + 1 , prestart + numLeft , inorder , instart , inroot - 1 , inMap);
        root -> right = buildTree(preorder , prestart + numLeft + 1 , preend , inorder , inroot + 1 , inend , inMap);

        return root;

    }  

public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
       inMap.clear();
        for(int i = 0; i < inorder.size(); i++){
            inMap[inorder[i]] = i;
        }

        TreeNode* root = buildTree(preorder , 0 , preorder.size() - 1 , inorder , 0 , inorder.size() -1 , inMap);

        return root;
    }
